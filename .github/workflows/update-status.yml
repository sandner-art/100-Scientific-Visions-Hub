name: Update Project Status & Deploy Dashboard

on:
  schedule:
    # Run every day at 6 AM UTC (adjust as needed)
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: 
      - main # Or your default branch (e.g., master)
    paths:
      - 'scripts/update-status.js'
      - '.github/workflows/**'
      - 'index.html'
      - 'package.json'
      - 'package-lock.json'
      # Optional: trigger if template files change, indicating a structural update
      # - '100SV.md' 
      # - 'progress.md'

permissions:
  contents: write # To commit changes to the repo (README, data files, reports)
  pages: write    # To deploy to GitHub Pages
  id-token: write # To authenticate with GitHub Pages

jobs:
  update-status:
    name: Update Project Data & Reports
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # If your script needs to push back to the repo and trigger other workflows,
        # or if you have branch protection rules that GITHUB_TOKEN can't bypass,
        # you might need a PAT with contents:write permission here as well.
        # For now, default GITHUB_TOKEN is used for checkout.
        # token: ${{ secrets.GH_PAT_FOR_CHECKOUT || secrets.GITHUB_TOKEN }} 
        fetch-depth: 0 # Fetches all history, potentially useful for some git based stats if added later

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Use a current LTS version
        cache: 'npm' # Cache npm dependencies based on package-lock.json

    - name: Install dependencies
      run: npm ci # Clean install using package-lock.json

    - name: Run status update script
      env:
        # Use GH_PAT_PRIVATE_REPOS if you need to access private repositories.
        # This PAT must have 'repo' scope.
        # If only public repos, secrets.GITHUB_TOKEN might be sufficient, but PAT has higher rate limits.
        GITHUB_TOKEN: ${{ secrets.GH_PAT_PRIVATE_REPOS }}
        GITHUB_OWNER: ${{ github.repository_owner }}
        GITHUB_REPOSITORY: ${{ github.repository }} # Passes "owner/repo-name" to the script
      run: node scripts/update-status.js

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot [update-status]"
        # Add all generated/modified files that need to be committed
        git add README.md reports/ data/ 
        if git diff --staged --quiet; then
          echo "No changes to commit."
        else
          git commit -m "ðŸ¤– Auto-update project status dashboard - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          # Add retry logic for push in case of transient network issues or minor conflicts
          for i in 1 2 3; do git push && break || sleep 15; done
        fi

  deploy-dashboard:
    name: Deploy Dashboard to GitHub Pages
    needs: update-status # Run only after status-update job is successful
    # Run only on pushes to the main branch, not on PRs or other branches,
    # and only if the previous job made changes (though this 'if' can be tricky to get right just based on commit)
    # A simpler approach is to always try to deploy if on main after update.
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' 
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout repository (for deployment)
      uses: actions/checkout@v4
      # This checkout ensures it gets the files committed by the 'update-status' job in the same workflow run.
      # If the previous job pushed and this checkout happens too quickly, there could be a race condition.
      # However, `needs: update-status` implies a sequence.
      # For absolute certainty of getting pushed changes, one might use a separate workflow triggered by push.
      # But for simplicity within one workflow, this is common.

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Path to the directory to upload. '.' means the root of your repo.
        # This should contain index.html and the data/ directory.
        path: '.' 

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4